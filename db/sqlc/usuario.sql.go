// Code generated by sqlc. DO NOT EDIT.
// source: usuario.sql

package db

import (
	"context"
)

const criarUsuario = `-- name: CriarUsuario :one
INSERT INTO usuario (
  nome_usuario,
  senha_hash,
  nome_completo,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING nome_usuario, senha_hash, nome_completo, email, mudanca_senha, criada_em
`

type CriarUsuarioParams struct {
	NomeUsuario  string `json:"nome_usuario"`
	SenhaHash    string `json:"senha_hash"`
	NomeCompleto string `json:"nome_completo"`
	Email        string `json:"email"`
}

func (q *Queries) CriarUsuario(ctx context.Context, arg CriarUsuarioParams) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, criarUsuario,
		arg.NomeUsuario,
		arg.SenhaHash,
		arg.NomeCompleto,
		arg.Email,
	)
	var i Usuario
	err := row.Scan(
		&i.NomeUsuario,
		&i.SenhaHash,
		&i.NomeCompleto,
		&i.Email,
		&i.MudancaSenha,
		&i.CriadaEm,
	)
	return i, err
}

const obterUsuario = `-- name: ObterUsuario :one
SELECT nome_usuario, senha_hash, nome_completo, email, mudanca_senha, criada_em FROM usuario
WHERE nome_usuario = $1 
LIMIT 1
`

func (q *Queries) ObterUsuario(ctx context.Context, nomeUsuario string) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, obterUsuario, nomeUsuario)
	var i Usuario
	err := row.Scan(
		&i.NomeUsuario,
		&i.SenhaHash,
		&i.NomeCompleto,
		&i.Email,
		&i.MudancaSenha,
		&i.CriadaEm,
	)
	return i, err
}
