// Code generated by sqlc. DO NOT EDIT.
// source: conta.sql

package db

import (
	"context"
)

const adicionarSaldoConta = `-- name: AdicionarSaldoConta :one
UPDATE contas 
SET saldo = saldo + $1
WHERE id = $2
RETURNING id, dono, saldo, moeda, criada_em
`

type AdicionarSaldoContaParams struct {
	Quantia int64 `json:"quantia"`
	ID      int64 `json:"id"`
}

func (q *Queries) AdicionarSaldoConta(ctx context.Context, arg AdicionarSaldoContaParams) (Conta, error) {
	row := q.db.QueryRowContext(ctx, adicionarSaldoConta, arg.Quantia, arg.ID)
	var i Conta
	err := row.Scan(
		&i.ID,
		&i.Dono,
		&i.Saldo,
		&i.Moeda,
		&i.CriadaEm,
	)
	return i, err
}

const atualizarConta = `-- name: AtualizarConta :one
UPDATE contas 
SET saldo = $2
WHERE id = $1
RETURNING id, dono, saldo, moeda, criada_em
`

type AtualizarContaParams struct {
	ID    int64 `json:"id"`
	Saldo int64 `json:"saldo"`
}

func (q *Queries) AtualizarConta(ctx context.Context, arg AtualizarContaParams) (Conta, error) {
	row := q.db.QueryRowContext(ctx, atualizarConta, arg.ID, arg.Saldo)
	var i Conta
	err := row.Scan(
		&i.ID,
		&i.Dono,
		&i.Saldo,
		&i.Moeda,
		&i.CriadaEm,
	)
	return i, err
}

const criarConta = `-- name: CriarConta :one
INSERT INTO contas (
  dono,
  saldo,
  moeda
) VALUES (
  $1, $2, $3
) RETURNING id, dono, saldo, moeda, criada_em
`

type CriarContaParams struct {
	Dono  string `json:"dono"`
	Saldo int64  `json:"saldo"`
	Moeda string `json:"moeda"`
}

func (q *Queries) CriarConta(ctx context.Context, arg CriarContaParams) (Conta, error) {
	row := q.db.QueryRowContext(ctx, criarConta, arg.Dono, arg.Saldo, arg.Moeda)
	var i Conta
	err := row.Scan(
		&i.ID,
		&i.Dono,
		&i.Saldo,
		&i.Moeda,
		&i.CriadaEm,
	)
	return i, err
}

const deletarConta = `-- name: DeletarConta :exec
DELETE FROM contas 
WHERE id = $1
`

func (q *Queries) DeletarConta(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletarConta, id)
	return err
}

const listarContas = `-- name: ListarContas :many
SELECT id, dono, saldo, moeda, criada_em FROM contas
WHERE dono = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListarContasParams struct {
	Dono   string `json:"dono"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListarContas(ctx context.Context, arg ListarContasParams) ([]Conta, error) {
	rows, err := q.db.QueryContext(ctx, listarContas, arg.Dono, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conta{}
	for rows.Next() {
		var i Conta
		if err := rows.Scan(
			&i.ID,
			&i.Dono,
			&i.Saldo,
			&i.Moeda,
			&i.CriadaEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obterConta = `-- name: ObterConta :one
SELECT id, dono, saldo, moeda, criada_em FROM contas
WHERE id = $1 
LIMIT 1
`

func (q *Queries) ObterConta(ctx context.Context, id int64) (Conta, error) {
	row := q.db.QueryRowContext(ctx, obterConta, id)
	var i Conta
	err := row.Scan(
		&i.ID,
		&i.Dono,
		&i.Saldo,
		&i.Moeda,
		&i.CriadaEm,
	)
	return i, err
}

const obterContaParaAtualizar = `-- name: ObterContaParaAtualizar :one
SELECT id, dono, saldo, moeda, criada_em FROM contas
WHERE id = $1 
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) ObterContaParaAtualizar(ctx context.Context, id int64) (Conta, error) {
	row := q.db.QueryRowContext(ctx, obterContaParaAtualizar, id)
	var i Conta
	err := row.Scan(
		&i.ID,
		&i.Dono,
		&i.Saldo,
		&i.Moeda,
		&i.CriadaEm,
	)
	return i, err
}
