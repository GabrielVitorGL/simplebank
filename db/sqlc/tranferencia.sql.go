// Code generated by sqlc. DO NOT EDIT.
// source: tranferencia.sql

package db

import (
	"context"
)

const criarTransferencia = `-- name: CriarTransferencia :one
INSERT INTO transferencias (
  de_id_conta,
  para_id_conta,
  quantia
) VALUES (
  $1, $2, $3
) RETURNING id, de_id_conta, para_id_conta, quantia, criada_em
`

type CriarTransferenciaParams struct {
	DeIDConta   int64 `json:"de_id_conta"`
	ParaIDConta int64 `json:"para_id_conta"`
	Quantia     int64 `json:"quantia"`
}

func (q *Queries) CriarTransferencia(ctx context.Context, arg CriarTransferenciaParams) (Transferencia, error) {
	row := q.db.QueryRowContext(ctx, criarTransferencia, arg.DeIDConta, arg.ParaIDConta, arg.Quantia)
	var i Transferencia
	err := row.Scan(
		&i.ID,
		&i.DeIDConta,
		&i.ParaIDConta,
		&i.Quantia,
		&i.CriadaEm,
	)
	return i, err
}

const listarTransferencias = `-- name: ListarTransferencias :many
SELECT id, de_id_conta, para_id_conta, quantia, criada_em FROM transferencias
WHERE 
    de_id_conta = $1 OR
    para_id_conta = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListarTransferenciasParams struct {
	DeIDConta   int64 `json:"de_id_conta"`
	ParaIDConta int64 `json:"para_id_conta"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListarTransferencias(ctx context.Context, arg ListarTransferenciasParams) ([]Transferencia, error) {
	rows, err := q.db.QueryContext(ctx, listarTransferencias,
		arg.DeIDConta,
		arg.ParaIDConta,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transferencia
	for rows.Next() {
		var i Transferencia
		if err := rows.Scan(
			&i.ID,
			&i.DeIDConta,
			&i.ParaIDConta,
			&i.Quantia,
			&i.CriadaEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obterTransferencia = `-- name: ObterTransferencia :one
SELECT id, de_id_conta, para_id_conta, quantia, criada_em FROM transferencias
WHERE id = $1 
LIMIT 1
`

func (q *Queries) ObterTransferencia(ctx context.Context, id int64) (Transferencia, error) {
	row := q.db.QueryRowContext(ctx, obterTransferencia, id)
	var i Transferencia
	err := row.Scan(
		&i.ID,
		&i.DeIDConta,
		&i.ParaIDConta,
		&i.Quantia,
		&i.CriadaEm,
	)
	return i, err
}
