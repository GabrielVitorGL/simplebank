// Code generated by sqlc. DO NOT EDIT.
// source: mudanca.sql

package db

import (
	"context"
)

const criarMudanca = `-- name: CriarMudanca :one
INSERT INTO mudancas (
  id_conta,
  quantia
) VALUES (
  $1, $2
) RETURNING id, id_conta, quantia, criada_em
`

type CriarMudancaParams struct {
	IDConta int64 `json:"id_conta"`
	Quantia int64 `json:"quantia"`
}

func (q *Queries) CriarMudanca(ctx context.Context, arg CriarMudancaParams) (Mudanca, error) {
	row := q.db.QueryRowContext(ctx, criarMudanca, arg.IDConta, arg.Quantia)
	var i Mudanca
	err := row.Scan(
		&i.ID,
		&i.IDConta,
		&i.Quantia,
		&i.CriadaEm,
	)
	return i, err
}

const listarMudancas = `-- name: ListarMudancas :many
SELECT id, id_conta, quantia, criada_em FROM mudancas
WHERE id_conta = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListarMudancasParams struct {
	IDConta int64 `json:"id_conta"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListarMudancas(ctx context.Context, arg ListarMudancasParams) ([]Mudanca, error) {
	rows, err := q.db.QueryContext(ctx, listarMudancas, arg.IDConta, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mudanca{}
	for rows.Next() {
		var i Mudanca
		if err := rows.Scan(
			&i.ID,
			&i.IDConta,
			&i.Quantia,
			&i.CriadaEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obterMudanca = `-- name: ObterMudanca :one
SELECT id, id_conta, quantia, criada_em FROM mudancas
WHERE id = $1 
LIMIT 1
`

func (q *Queries) ObterMudanca(ctx context.Context, id int64) (Mudanca, error) {
	row := q.db.QueryRowContext(ctx, obterMudanca, id)
	var i Mudanca
	err := row.Scan(
		&i.ID,
		&i.IDConta,
		&i.Quantia,
		&i.CriadaEm,
	)
	return i, err
}
