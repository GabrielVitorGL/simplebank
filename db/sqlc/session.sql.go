// Code generated by sqlc. DO NOT EDIT.
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO secoes (
  id,
  nome_usuario,
  refresh_token,
  user_agent,
  client_ip,
  is_blocked,
  expira_em
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, nome_usuario, refresh_token, user_agent, client_ip, is_blocked, expira_em, criada_em
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	NomeUsuario  string    `json:"nome_usuario"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiraEm     time.Time `json:"expira_em"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Seco, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.NomeUsuario,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiraEm,
	)
	var i Seco
	err := row.Scan(
		&i.ID,
		&i.NomeUsuario,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiraEm,
		&i.CriadaEm,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, nome_usuario, refresh_token, user_agent, client_ip, is_blocked, expira_em, criada_em FROM secoes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Seco, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Seco
	err := row.Scan(
		&i.ID,
		&i.NomeUsuario,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiraEm,
		&i.CriadaEm,
	)
	return i, err
}
