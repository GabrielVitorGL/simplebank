// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/techschool/simplebank/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/techschool/simplebank/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AdicionarSaldoConta mocks base method.
func (m *MockStore) AdicionarSaldoConta(arg0 context.Context, arg1 db.AdicionarSaldoContaParams) (db.Conta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdicionarSaldoConta", arg0, arg1)
	ret0, _ := ret[0].(db.Conta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdicionarSaldoConta indicates an expected call of AdicionarSaldoConta.
func (mr *MockStoreMockRecorder) AdicionarSaldoConta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdicionarSaldoConta", reflect.TypeOf((*MockStore)(nil).AdicionarSaldoConta), arg0, arg1)
}

// AtualizarConta mocks base method.
func (m *MockStore) AtualizarConta(arg0 context.Context, arg1 db.AtualizarContaParams) (db.Conta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtualizarConta", arg0, arg1)
	ret0, _ := ret[0].(db.Conta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtualizarConta indicates an expected call of AtualizarConta.
func (mr *MockStoreMockRecorder) AtualizarConta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtualizarConta", reflect.TypeOf((*MockStore)(nil).AtualizarConta), arg0, arg1)
}

// CriarConta mocks base method.
func (m *MockStore) CriarConta(arg0 context.Context, arg1 db.CriarContaParams) (db.Conta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CriarConta", arg0, arg1)
	ret0, _ := ret[0].(db.Conta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CriarConta indicates an expected call of CriarConta.
func (mr *MockStoreMockRecorder) CriarConta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CriarConta", reflect.TypeOf((*MockStore)(nil).CriarConta), arg0, arg1)
}

// CriarMudanca mocks base method.
func (m *MockStore) CriarMudanca(arg0 context.Context, arg1 db.CriarMudancaParams) (db.Mudanca, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CriarMudanca", arg0, arg1)
	ret0, _ := ret[0].(db.Mudanca)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CriarMudanca indicates an expected call of CriarMudanca.
func (mr *MockStoreMockRecorder) CriarMudanca(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CriarMudanca", reflect.TypeOf((*MockStore)(nil).CriarMudanca), arg0, arg1)
}

// CriarTransferencia mocks base method.
func (m *MockStore) CriarTransferencia(arg0 context.Context, arg1 db.CriarTransferenciaParams) (db.Transferencia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CriarTransferencia", arg0, arg1)
	ret0, _ := ret[0].(db.Transferencia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CriarTransferencia indicates an expected call of CriarTransferencia.
func (mr *MockStoreMockRecorder) CriarTransferencia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CriarTransferencia", reflect.TypeOf((*MockStore)(nil).CriarTransferencia), arg0, arg1)
}

// DeletarConta mocks base method.
func (m *MockStore) DeletarConta(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletarConta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletarConta indicates an expected call of DeletarConta.
func (mr *MockStoreMockRecorder) DeletarConta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletarConta", reflect.TypeOf((*MockStore)(nil).DeletarConta), arg0, arg1)
}

// ListarContas mocks base method.
func (m *MockStore) ListarContas(arg0 context.Context, arg1 db.ListarContasParams) ([]db.Conta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListarContas", arg0, arg1)
	ret0, _ := ret[0].([]db.Conta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListarContas indicates an expected call of ListarContas.
func (mr *MockStoreMockRecorder) ListarContas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListarContas", reflect.TypeOf((*MockStore)(nil).ListarContas), arg0, arg1)
}

// ListarMudancas mocks base method.
func (m *MockStore) ListarMudancas(arg0 context.Context, arg1 db.ListarMudancasParams) ([]db.Mudanca, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListarMudancas", arg0, arg1)
	ret0, _ := ret[0].([]db.Mudanca)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListarMudancas indicates an expected call of ListarMudancas.
func (mr *MockStoreMockRecorder) ListarMudancas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListarMudancas", reflect.TypeOf((*MockStore)(nil).ListarMudancas), arg0, arg1)
}

// ListarTransferencias mocks base method.
func (m *MockStore) ListarTransferencias(arg0 context.Context, arg1 db.ListarTransferenciasParams) ([]db.Transferencia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListarTransferencias", arg0, arg1)
	ret0, _ := ret[0].([]db.Transferencia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListarTransferencias indicates an expected call of ListarTransferencias.
func (mr *MockStoreMockRecorder) ListarTransferencias(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListarTransferencias", reflect.TypeOf((*MockStore)(nil).ListarTransferencias), arg0, arg1)
}

// ObterConta mocks base method.
func (m *MockStore) ObterConta(arg0 context.Context, arg1 int64) (db.Conta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObterConta", arg0, arg1)
	ret0, _ := ret[0].(db.Conta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObterConta indicates an expected call of ObterConta.
func (mr *MockStoreMockRecorder) ObterConta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObterConta", reflect.TypeOf((*MockStore)(nil).ObterConta), arg0, arg1)
}

// ObterContaParaAtualizar mocks base method.
func (m *MockStore) ObterContaParaAtualizar(arg0 context.Context, arg1 int64) (db.Conta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObterContaParaAtualizar", arg0, arg1)
	ret0, _ := ret[0].(db.Conta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObterContaParaAtualizar indicates an expected call of ObterContaParaAtualizar.
func (mr *MockStoreMockRecorder) ObterContaParaAtualizar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObterContaParaAtualizar", reflect.TypeOf((*MockStore)(nil).ObterContaParaAtualizar), arg0, arg1)
}

// ObterMudanca mocks base method.
func (m *MockStore) ObterMudanca(arg0 context.Context, arg1 int64) (db.Mudanca, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObterMudanca", arg0, arg1)
	ret0, _ := ret[0].(db.Mudanca)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObterMudanca indicates an expected call of ObterMudanca.
func (mr *MockStoreMockRecorder) ObterMudanca(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObterMudanca", reflect.TypeOf((*MockStore)(nil).ObterMudanca), arg0, arg1)
}

// ObterTransferencia mocks base method.
func (m *MockStore) ObterTransferencia(arg0 context.Context, arg1 int64) (db.Transferencia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObterTransferencia", arg0, arg1)
	ret0, _ := ret[0].(db.Transferencia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObterTransferencia indicates an expected call of ObterTransferencia.
func (mr *MockStoreMockRecorder) ObterTransferencia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObterTransferencia", reflect.TypeOf((*MockStore)(nil).ObterTransferencia), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}
